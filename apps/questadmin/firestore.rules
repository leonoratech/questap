rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow authenticated users to read and write course topics
    match /courseTopics/{document} {
      allow read, write: if request.auth != null;
    }
    
    // Allow authenticated users to read and write courses
    match /courses/{document} {
      allow read, write: if request.auth != null;
    }
    
    // Allow authenticated users to read and write user profiles
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Colleges collection - all authenticated users can read, only superadmins can write
    match /colleges/{collegeId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
    }
    
    // College administrators collection - only superadmins can write, authenticated users can read
    match /collegeAdministrators/{administratorId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
    }
    
    // Course reviews collection - users can read all published reviews and create/update/delete their own
    match /course_reviews/{reviewId} {
      allow read: if request.auth != null && (resource.data.isPublished == true || resource.data.userId == request.auth.uid);
      allow create: if request.auth != null && request.auth.uid == resource.data.userId;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Course enrollments - users can only access their own enrollments
    match /course_enrollments/{enrollmentId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Programs collection - college administrators and superadmins can manage programs for their college
    match /programs/{programId} {
      allow read: if request.auth != null;
      allow create, update: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) && (
          // Superadmin can manage all programs
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin' ||
          // College administrators can manage programs for their college
          (exists(/databases/$(database)/documents/collegeAdministrators/$(request.auth.uid)) &&
           get(/databases/$(database)/documents/collegeAdministrators/$(request.auth.uid)).data.collegeId == resource.data.collegeId &&
           get(/databases/$(database)/documents/collegeAdministrators/$(request.auth.uid)).data.isActive == true)
        );
      allow delete: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) && (
          // Only superadmin can delete programs
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin' ||
          // College administrators can delete programs for their college
          (exists(/databases/$(database)/documents/collegeAdministrators/$(request.auth.uid)) &&
           get(/databases/$(database)/documents/collegeAdministrators/$(request.auth.uid)).data.collegeId == resource.data.collegeId &&
           get(/databases/$(database)/documents/collegeAdministrators/$(request.auth.uid)).data.isActive == true)
        );
    }
    
    // Subjects collection - college administrators and superadmins can manage subjects for their college programs
    match /subjects/{subjectId} {
      allow read: if request.auth != null;
      allow create, update: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) && (
          // Superadmin can manage all subjects
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin' ||
          // College administrators can manage subjects for their college
          (exists(/databases/$(database)/documents/collegeAdministrators/$(request.auth.uid)) &&
           get(/databases/$(database)/documents/collegeAdministrators/$(request.auth.uid)).data.collegeId == resource.data.collegeId &&
           get(/databases/$(database)/documents/collegeAdministrators/$(request.auth.uid)).data.isActive == true)
        );
      allow delete: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) && (
          // Superadmin can delete all subjects
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin' ||
          // College administrators can delete subjects for their college
          (exists(/databases/$(database)/documents/collegeAdministrators/$(request.auth.uid)) &&
           get(/databases/$(database)/documents/collegeAdministrators/$(request.auth.uid)).data.collegeId == resource.data.collegeId &&
           get(/databases/$(database)/documents/collegeAdministrators/$(request.auth.uid)).data.isActive == true)
        );
    }
    
    // Default rule - deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
